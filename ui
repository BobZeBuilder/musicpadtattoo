import ddf.minim.*;
import controlP5.*;
import processing.serial.*;

Minim minim;
AudioPlayer sound;
AudioPlayer[] pads;
String[] padSounds = {"kick.wav", "snare.wav", "hihat.wav", "clap.wav", "dirtbeat.wav", "perc.wav"};

ControlP5 cp5;
Slider slider1, slider2;
Button playPauseButton;
Knob volumeDial;
Button[] padButtons;
boolean[] padPlaying;  // Track playing state of each pad

// Equalizer effects implemented as custom filters:
MyLowPass bassFilter;    // Custom low-pass filter for bass
MyHighPass trebleFilter; // Custom high-pass filter for treble

float volume = 0.8;
boolean isPlaying = true;
boolean isPadMode = true;  // true = PAD MODE, false = SLIDER MODE

color nightBg = color(20, 20, 30);
color textColor = color(200, 200, 255);
color buttonColor = color(50, 50, 80);
color activeColor = color(100, 100, 255);

// Serial communication variables
Serial arduinoPort;
int prevPausePlay = 0;
int prevVolDown = 0;
int prevVolUp = 0;
int prevMode = 0;
int[] prevPad = new int[8];  // For 8 pad inputs from Arduino

void setup() {
  size(600, 400);
  minim = new Minim(this);
  
  // Load main sound
  sound = minim.loadFile("dirtbeat.wav");
  sound.loop();
  
  // Initialize equalizer effects:
  // For bass: when slider1 is at 0, cutoff = 5000 Hz (minimal bass boost);
  // at 100, cutoff = 500 Hz (greater bass boost).
  bassFilter = new MyLowPass(5000, sound.sampleRate());
  // For treble: when slider2 is at 0, cutoff = 100 Hz;
  // at 100, cutoff = 2000 Hz.
  trebleFilter = new MyHighPass(100, sound.sampleRate());
  
  // Add effects to the audio chain
  sound.addEffect(bassFilter);
  sound.addEffect(trebleFilter);
  
  // Load pad sounds
  pads = new AudioPlayer[padSounds.length];
  padPlaying = new boolean[padSounds.length];
  for (int i = 0; i < padSounds.length; i++) {
    pads[i] = minim.loadFile(padSounds[i]);
    padPlaying[i] = false;
  }

  cp5 = new ControlP5(this);
  
  // Sliders for equalizer control (always visible)
  slider1 = cp5.addSlider("slider1")
               .setPosition(20, 50)
               .setSize(150, 20)
               .setRange(0, 100)
               .setValue(50)
               .setColorBackground(buttonColor)
               .setColorForeground(activeColor)
               .setColorActive(textColor);
               
  slider2 = cp5.addSlider("slider2")
               .setPosition(20, 100)
               .setSize(150, 20)
               .setRange(0, 100)
               .setValue(50)
               .setColorBackground(buttonColor)
               .setColorForeground(activeColor)
               .setColorActive(textColor);
  
  // Play/Pause Button for main sound
  playPauseButton = cp5.addButton("togglePlay")
                       .setLabel("Pause")
                       .setPosition(50, 260)
                       .setSize(100, 40)
                       .setColorBackground(buttonColor)
                       .setColorForeground(activeColor)
                       .setColorActive(textColor);

  // Volume Dial for main sound volume
  volumeDial = cp5.addKnob("volume")
                  .setPosition(50, 160)
                  .setRadius(30)
                  .setRange(0, 1)
                  .setValue(volume)
                  .setColorBackground(buttonColor)
                  .setColorForeground(activeColor)
                  .setColorActive(textColor);
  
  // Sound Pad Buttons (6 pads) initially set for PAD MODE
  padButtons = new Button[6];
  String[] padLabels = {"Kick", "Snare", "Hi-Hat", "Clap", "Dirtbeat", "Perc"};
  for (int i = 0; i < 6; i++) {
    int x = 200 + (i % 3) * 100;
    int y = 300 + (i / 3) * 50;
    padButtons[i] = cp5.addButton("pad" + i)
                       .setLabel(padLabels[i])
                       .setPosition(x, y)
                       .setSize(80, 40)
                       .setColorBackground(buttonColor)
                       .setColorForeground(activeColor)
                       .setColorActive(textColor);
  }
  
  // Initialize Serial communication (adjust port if necessary)
  println(Serial.list());
  arduinoPort = new Serial(this, Serial.list()[0], 115200);
  arduinoPort.bufferUntil('\n');
}

void draw() {
  background(nightBg);
  
  // Title and waveform display
  fill(textColor);
  textSize(16);
  text("Sound Board", 250, 30);
  drawWaveform();
  
  // Apply volume (convert to dB range)
  float gainVal = map(volume, 0, 1, -80, 0);
  sound.setGain(gainVal);
  for (int i = 0; i < pads.length; i++) {
    pads[i].setGain(gainVal);
  }
  
  // Update equalizer effects based on slider values:
  // Bass: Map slider1 from 5000 Hz down to 500 Hz.
  float bassCutoff = map(slider1.getValue(), slider1.getMin(), slider1.getMax(), 5000, 500);
  bassFilter.setCutoff(bassCutoff);
  
  // Treble: Map slider2 from 100 Hz up to 2000 Hz.
  float trebleCutoff = map(slider2.getValue(), slider2.getMin(), slider2.getMax(), 100, 2000);
  trebleFilter.setCutoff(trebleCutoff);
  
  // Draw slider labels
  textSize(12);
  fill(textColor);
  text("Bass Control", 20, 45);
  text("Treble Control", 20, 95);
  
  // Display current mode at bottom left
  textSize(16);
  if (isPadMode) {
    text("PAD MODE", 10, height - 10);
  } else {
    text("SLIDER MODE", 10, height - 10);
  }
}

void drawWaveform() {
  stroke(activeColor);
  noFill();
  beginShape();
  if (sound.isPlaying()) {
    for (int i = 0; i < width / 2; i++) {
      int bufferIndex = int(map(i, 0, width / 2, 0, sound.bufferSize()));
      float wave = sound.left.get(bufferIndex) * 50;
      vertex(width / 2 + i, height / 3 + wave);
    }
  }
  endShape();
}

// GUI Button Event Handlers (for on-screen pad buttons)
void pad0() { handlePadAction(0); }
void pad1() { handlePadAction(1); }
void pad2() { handlePadAction(2); }
void pad3() { handlePadAction(3); }
void pad4() { handlePadAction(4); }
void pad5() { handlePadAction(5); }

void handlePadAction(int index) {
  // In PAD MODE, toggle the pad sound.
  if (isPadMode) {
    togglePad(index);
  } else {
    // In SLIDER MODE, simulate pad presses to adjust sliders.
    if (index == 0) { // Increase slider1 (Bass Control)
      slider1.setValue(min(slider1.getValue() + 5, slider1.getMax()));
    } else if (index == 1) { // Decrease slider1 (Bass Control)
      slider1.setValue(max(slider1.getValue() - 5, slider1.getMin()));
    } else if (index == 2) { // Increase slider2 (Treble Control)
      slider2.setValue(min(slider2.getValue() + 5, slider2.getMax()));
    } else if (index == 3) { // Decrease slider2 (Treble Control)
      slider2.setValue(max(slider2.getValue() - 5, slider2.getMin()));
    }
  }
}

void togglePad(int index) {
  if (padPlaying[index]) {
    pads[index].pause();
  } else {
    pads[index].rewind();
    pads[index].play();
  }
  padPlaying[index] = !padPlaying[index];
}

void volume(float v) {
  volume = v;
}

// Toggle main sound play/pause
void togglePlay() {
  if (isPlaying) {
    sound.pause();
    stopAllPads();
    playPauseButton.setLabel("Play");
  } else {
    sound.loop();
    playPauseButton.setLabel("Pause");
  }
  isPlaying = !isPlaying;
}

void stopAllPads() {
  for (int i = 0; i < pads.length; i++) {
    pads[i].pause();
    padPlaying[i] = false;
  }
}

// Process incoming serial data from Arduino
void serialEvent(Serial p) {
  String data = trim(p.readStringUntil('\n'));
  // Expected CSV: pausePlay,volDown,volUp,mode, pad0,...,pad7
  if (data.indexOf(",") != -1) {
    String[] tokens = split(data, ",");
    if (tokens.length >= 12) {
      int arPause = int(tokens[0]);
      int arVolDown = int(tokens[1]);
      int arVolUp = int(tokens[2]);
      int arMode = int(tokens[3]);
      
      int[] arPads = new int[8];
      for (int i = 0; i < 8; i++) {
        arPads[i] = int(tokens[4 + i]);
      }
      
      // Process Pause/Play (E0)
      if (arPause == 1 && prevPausePlay == 0) {
        togglePlay();
      }
      prevPausePlay = arPause;
      
      // Process Volume Up (E2)
      if (arVolUp == 1 && prevVolUp == 0) {
        volume = min(volume + 0.1, 1);
        volumeDial.setValue(volume);
      }
      prevVolUp = arVolUp;
      
      // Process Volume Down (E1)
      if (arVolDown == 1 && prevVolDown == 0) {
        volume = max(volume - 0.1, 0);
        volumeDial.setValue(volume);
      }
      prevVolDown = arVolDown;
      
      // Process Mode toggle (E3) to switch between PAD and SLIDER modes.
      if (arMode == 1 && prevMode == 0) {
        isPadMode = !isPadMode;
        // Update pad button labels based on current mode.
        if (isPadMode) {
          padButtons[0].setLabel("Kick");
          padButtons[1].setLabel("Snare");
          padButtons[2].setLabel("Hi-Hat");
          padButtons[3].setLabel("Clap");
          padButtons[4].setLabel("Dirtbeat");
          padButtons[5].setLabel("Perc");
        } else {
          padButtons[0].setLabel("S1+");
          padButtons[1].setLabel("S1-");
          padButtons[2].setLabel("S2+");
          padButtons[3].setLabel("S2-");
          padButtons[4].setLabel("NA");
          padButtons[5].setLabel("NA");
        }
      }
      prevMode = arMode;
      
      // Process pad buttons (using Arduino electrodes E4â€“E9 for our 6 pads)
      for (int i = 0; i < 6; i++) {
        if (arPads[i] == 1 && prevPad[i] == 0) {
          handlePadAction(i);
        }
        prevPad[i] = arPads[i];
      }
    }
  }
}

// --- Custom Low-Pass Filter Class ---
class MyLowPass implements AudioEffect {
  float cutoff;
  float RC;
  float dt;
  float alpha;
  float prevOutputL, prevOutputR;
  float sampleRate;
  
  MyLowPass(float cutoff, float sampleRate) {
    this.sampleRate = sampleRate;
    setCutoff(cutoff);
    prevOutputL = 0;
    prevOutputR = 0;
  }
  
  public void setCutoff(float cutoff) {
    this.cutoff = cutoff;
    RC = 1.0 / (TWO_PI * cutoff);
    dt = 1.0 / sampleRate;
    alpha = dt / (RC + dt);
  }
  
  public void process(float[] samp) {
    for (int i = 0; i < samp.length; i++) {
      float input = samp[i];
      float output = prevOutputL + alpha * (input - prevOutputL);
      samp[i] = output;
      prevOutputL = output;
    }
  }
  
  public void process(float[] left, float[] right) {
    for (int i = 0; i < left.length; i++) {
      float inputL = left[i];
      float outputL = prevOutputL + alpha * (inputL - prevOutputL);
      left[i] = outputL;
      prevOutputL = outputL;
      
      float inputR = right[i];
      float outputR = prevOutputR + alpha * (inputR - prevOutputR);
      right[i] = outputR;
      prevOutputR = outputR;
    }
  }
}

// --- Custom High-Pass Filter Class ---
class MyHighPass implements AudioEffect {
  float cutoff;
  float RC;
  float dt;
  float alpha;
  float prevInputL, prevOutputL, prevInputR, prevOutputR;
  float sampleRate;
  
  MyHighPass(float cutoff, float sampleRate) {
    this.sampleRate = sampleRate;
    setCutoff(cutoff);
    prevInputL = prevOutputL = 0;
    prevInputR = prevOutputR = 0;
  }
  
  public void setCutoff(float cutoff) {
    this.cutoff = cutoff;
    RC = 1.0 / (TWO_PI * cutoff);
    dt = 1.0 / sampleRate;
    alpha = RC / (RC + dt);
  }
  
  public void process(float[] samp) {
    for (int i = 0; i < samp.length; i++) {
      float input = samp[i];
      float output = alpha * (prevOutputL + input - prevInputL);
      samp[i] = output;
      prevInputL = input;
      prevOutputL = output;
    }
  }
  
  public void process(float[] left, float[] right) {
    for (int i = 0; i < left.length; i++) {
      float inputL = left[i];
      float outputL = alpha * (prevOutputL + inputL - prevInputL);
      left[i] = outputL;
      prevInputL = inputL;
      prevOutputL = outputL;
      
      float inputR = right[i];
      float outputR = alpha * (prevOutputR + inputR - prevInputR);
      right[i] = outputR;
      prevInputR = inputR;
      prevOutputR = outputR;
    }
  }
}
