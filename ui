import ddf.minim.*;
import controlP5.*;

Minim minim;
AudioPlayer sound;
AudioPlayer[] pads;
String[] padSounds = {"kick.wav", "snare.wav", "hihat.wav", "clap.wav", "dirtbeat.wav", "perc.wav"};

ControlP5 cp5;
Slider slider1, slider2;
Button playPauseButton;
Knob volumeDial;
Button[] padButtons;
boolean[] padPlaying;  // Array to track the playing state of each pad

float volume = 0.8;
boolean isPlaying = true;
color nightBg = color(20, 20, 30);
color textColor = color(200, 200, 255);
color buttonColor = color(50, 50, 80);
color activeColor = color(100, 100, 255);

void setup() {
  size(600, 400);
  minim = new Minim(this);
  
  // Load main sound
  sound = minim.loadFile("dirtbeat.wav");
  sound.loop();
  
  // Load pads
  pads = new AudioPlayer[padSounds.length];
  padPlaying = new boolean[padSounds.length];
  
  for (int i = 0; i < padSounds.length; i++) {
    pads[i] = minim.loadFile(padSounds[i]);
    padPlaying[i] = false;  // Initialize all pads as not playing
  }

  cp5 = new ControlP5(this);

  // Sliders
  slider1 = cp5.addSlider("slider1")
               .setPosition(20, 50)
               .setSize(150, 20)
               .setRange(0, 100)
               .setValue(50)
               .setColorBackground(buttonColor)
               .setColorForeground(activeColor)
               .setColorActive(textColor);

  slider2 = cp5.addSlider("slider2")
               .setPosition(20, 100)
               .setSize(150, 20)
               .setRange(0, 100)
               .setValue(50)
               .setColorBackground(buttonColor)
               .setColorForeground(activeColor)
               .setColorActive(textColor);
  // Play/Pause Button
  playPauseButton = cp5.addButton("togglePlay")
                       .setLabel("Pause")
                       .setPosition(50, 260)
                       .setSize(100, 40)
                       .setColorBackground(buttonColor)
                       .setColorForeground(activeColor)
                       .setColorActive(textColor);

  // Volume Dial
  volumeDial = cp5.addKnob("volume")
                  .setPosition(50, 160)
                  .setRadius(30)
                  .setRange(0, 1)
                  .setValue(volume)
                  .setColorBackground(buttonColor)
                  .setColorForeground(activeColor)
                  .setColorActive(textColor);
  
  // Sound Pad Buttons
  padButtons = new Button[6];
  for (int i = 0; i < 6; i++) {
    int x = 200 + (i % 3) * 100;
    int y = 300 + (i / 3) * 50;
    
    padButtons[i] = cp5.addButton("pad" + i)
                       .setLabel("Pad " + (i + 1))
                       .setPosition(x, y)
                       .setSize(80, 40)
                       .setColorBackground(buttonColor)
                       .setColorForeground(activeColor)
                       .setColorActive(textColor);
  }
}

void draw() {
  background(nightBg);
  
  // Title
  fill(textColor);
  textSize(16);
  text("Sound Board", 250, 30);

  // Draw waveform
  drawWaveform();
  
  // Apply volume to sound
  sound.setGain(map(volume, 0, 1, -80, 0)); // Convert to dB range
  pads[0].setGain(map(volume, 0, 1, -80, 0)); // Convert to dB range
  pads[1].setGain(map(volume, 0, 1, -80, 0)); // Convert to dB range
  pads[2].setGain(map(volume, 0, 1, -80, 0)); // Convert to dB range
  pads[3].setGain(map(volume, 0, 1, -80, 0)); // Convert to dB range
  pads[4].setGain(map(volume, 0, 1, -80, 0)); // Convert to dB range
  pads[5].setGain(map(volume, 0, 1, -80, 0)); // Convert to dB range
}

void drawWaveform() {
  stroke(activeColor);
  noFill();
  beginShape();
  
  if (sound.isPlaying()) {
    for (int i = 0; i < width / 2; i++) {
      int bufferIndex = int(map(i, 0, width / 2, 0, sound.bufferSize()));
      float wave = sound.left.get(bufferIndex) * 50;
      vertex(width / 2 + i, height / 3 + wave);
    }
  }
  
  endShape();
}

// Button Event Handlers
void pad0() { togglePad(0); }
void pad1() { togglePad(1); }
void pad2() { togglePad(2); }
void pad3() { togglePad(3); }
void pad4() { togglePad(4); }
void pad5() { togglePad(5); }

// Toggle pads on/off
void togglePad(int index) {
  if (padPlaying[index]) {
    pads[index].pause();  // Stop the sound
  } else {
    pads[index].rewind();
    pads[index].play();
  }
  padPlaying[index] = !padPlaying[index];  // Toggle state
}

// Adjust volume
void volume(float v) {
  volume = v;
}

// Toggle Play/Pause for Main Sound
void togglePlay() {
  if (isPlaying) {
    sound.pause();
    stopAllPads();  // Stop all pad sounds when pausing
    playPauseButton.setLabel("Play");
  } else {
    sound.loop();
    playPauseButton.setLabel("Pause");
  }
  isPlaying = !isPlaying;
}

// Stop all pads when pausing the main track
void stopAllPads() {
  for (int i = 0; i < pads.length; i++) {
    pads[i].pause();
    padPlaying[i] = false;
  }
}
